<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">  
  <channel>
    <title>Rminc on The Mouse Imaging Centre Blog</title>
    <link>/blog/tags/rminc/</link>
    <description>Recent content in Rminc on The Mouse Imaging Centre Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 23 Feb 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/blog/tags/rminc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Preferential Spatial Gene Expression in Neuroanatomy</title>
      <link>/blog/post/2018-02-23_gene-expression/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/post/2018-02-23_gene-expression/</guid>
      <description><![CDATA[
      <div id="intro" class="section level2">
<h2>Intro</h2>
<p>In this post I will demonstrate how to use my package <code>ABIgeneRMINC</code> to download, read and analyze mouse brain gene expression data from the Allen Brain Institute.</p>
<p>The Allen Brain Institute (ABI) has acquired and released genome-wide spatial gene expression maps for the mouse brain. The data is generated using <em>in situ</em> hybridization experiments (ISH), where nucleotide probes for specific genes bind directly to mouse brain tissue. The probe binding is then marked with a biotin label that can be used to locate regions where a gene is expressed.</p>
<p>For the analysis you will need two R packages <code>RMINC</code> and <code>ABIgeneRMINC</code>.</p>
<pre class="r"><code># devtools::install_github(repo=&quot;DJFernandes/ABIgeneRMINC&quot;)   # If you need to install
library(ABIgeneRMINC)
library(RMINC)</code></pre>
</div>
<div id="getting-the-data" class="section level2">
<h2>Getting the data</h2>
<p>With the packages load you can now look up your favourite gene. You need to know the gene acronym though, which you can find on the NCBI database. In this case, I want to look up Bdnf. The function below queries the Allen Brain API and finds all experiments conducted with Bdnf.</p>
<pre class="r"><code>fge=find.gene.experiment(&#39;Bdnf&#39;)
fge</code></pre>
<pre><code>##   gene   slices ExperimentID
## 1 Bdnf sagittal     75695642
## 2 Bdnf  coronal     79587720
##                                                                  URLs
## 1 http://api.brain-map.org/grid_data/download/75695642?include=energy
## 2 http://api.brain-map.org/grid_data/download/79587720?include=energy</code></pre>
<p>We are in luck! There are two experiments the Allen Brain Institute ran with Bdnf, identified by ExperimentIDs 79587720 and 75695642. The former was conducted on coronal slices in the brain, and the latter on sagittal slices. We will see why this is important later on. The URLs where you can download expression data is given in the final column. You can enter them in your internet browser and file should begin to download. If you don’t want to leave the wonderful world of R just to download (I don’t blame you), we can actually download and read the data within R itself.</p>
<pre class="r"><code>genedata1 = read.raw.gene(as.character(fge$URLs[1]),url = TRUE)</code></pre>
<pre><code>## Loading required package: bitops</code></pre>
<p>It is generally better to download outside R and save the file, so you don’t have to keep downloading. Obtain the path to the file, and use it as as argument to read as follows:</p>
<pre class="r"><code>genedata1 = read.raw.gene(&#39;/projects/egerek/matthijs/2015-07-Allen-Brain/Allen_Gene_Expression/raw_data/coronal/Bdnf_sid79587720/energy.raw&#39;)</code></pre>
</div>
<div id="visualizing-the-gene-expression" class="section level2">
<h2>Visualizing the gene expression</h2>
<p>The gene expression data is a 1D vector. It can easily be converted to a 3D array using the mincArray function (which we will do later). But there is an important note to talk about before going further. The 1D vector lists values going from X=Anterior-to-Posterior, Y=Superior-to-Inferior, and Z=Left-to-Right (dimensions written from fastest changing index to slowest). This is the ABI orientation. The RMINC vectors typically are 1D vectors going from X=Left-to-Right, Y=Posterior-to-Anterior, Z=Inferior-to-Superior (dimensions written from fastest changing index to slowest). This is the MNI orientation. You can make a choice as to which orientiation you want to analyze in but I will be choosing MNI orientation in this tutorial. Just make sure you are consistent with your orientations and you won’t have problems. The function below converts ABI orientation to MNI orientation:</p>
<pre class="r"><code>genedata1 = allenVectorTOmincVector(genedata1)
# genedata1 = mincVectorTOallenVector(genedata1)  #This is the inverse function</code></pre>
<p>Now, we can visualize the gene expression. Below is a sagittal slice</p>
<pre class="r"><code>image(mincArray(genedata1)[30,,], ylab=&#39;Superior-Inferior&#39; ,xlab=&#39;Anterior-Posterior&#39;)</code></pre>
<p><img src="/blog/post/2018-02-23_gene-expression_files/figure-html/6-1.png" width="672" /></p>
</div>
<div id="adding-an-anatomical-underlay" class="section level2">
<h2>Adding an anatomical underlay</h2>
<p>I am not a good mouse brain anatomist, and so I find it pretty difficult to tell from this expression heatmap where exactly the expression is in the brain. We will now overlay a background MRI template to tell us where the gene expression is and use RMINC to create slice series.</p>
<pre class="r"><code>anatfile=&#39;/projects/egerek/matthijs/2015-07-Allen-Brain/allenCCFV3_to_dorr_registration/allenCCFV3/atlas_in_200um/Dorr_resampled_200um.mnc&#39;
mincPlotSliceSeries(
  anatomy=mincArray(mincGetVolume(anatfile)),
  statistics=mincArray(genedata1),
  symmetric=FALSE,
  col=colorRampPalette(c(&quot;darkgreen&quot;,&quot;yellowgreen&quot;))(255),
  legend=&quot;Bdnf Expression&quot;,low=2,high=6.5)</code></pre>
<p><img src="/blog/post/2018-02-23_gene-expression_files/figure-html/7-1.png" width="672" /></p>
<p>Much better. I can tell there is high expression in the cortex and hippocampus.</p>
<p>Let us also look at the other Bdnf experiment (ID: 75695642).</p>
<pre class="r"><code>genedata2 = read.raw.gene(as.character(fge$URLs[2]),url = TRUE)
genedata2 = allenVectorTOmincVector(genedata2)
mincPlotSliceSeries(
  anatomy=mincArray(mincGetVolume(anatfile)),
  statistics=mincArray(genedata2),
  symmetric=FALSE,
  col=colorRampPalette(c(&quot;darkgreen&quot;,&quot;yellowgreen&quot;))(255),
  legend=&quot;Bdnf Expression&quot;,low=2,high=6.5)</code></pre>
<p><img src="/blog/post/2018-02-23_gene-expression_files/figure-html/8-1.png" width="672" /></p>
<p>We see that the sagittal slices only span half the brain. This was a deliberate choice by the ABI and most of the gene experiments are like this. Furthermore, slices are sampled every 200 microns for the sagittal datasets and every 100 microns for the coronal datasets. That is why we prefer using the coronal slices any chance we get, but there are still tools that help us work with sagittal data. We can reflect data across the sagittal midplane to fill in the missing hemisphere as so:</p>
<pre class="r"><code>genedata2.reflected=midplane.reflect(genedata2,reflect.dim=3)
mincPlotSliceSeries(
  anatomy=mincArray(mincGetVolume(anatfile)),
  statistics=mincArray(genedata2.reflected),
  symmetric=FALSE,
  col=colorRampPalette(c(&quot;darkgreen&quot;,&quot;yellowgreen&quot;))(255),
  legend=&quot;Bdnf Expression&quot;,low=2,high=6.5)</code></pre>
<p><img src="/blog/post/2018-02-23_gene-expression_files/figure-html/99-1.png" width="672" /></p>
<p>We can do better. Because there sagittal sections were only sampled every 200um, there is a lot of missing data due to slice misalignment. We can fill them in using nearest neighbour marching averages.</p>
<pre class="r"><code>labelfile=system.file(&#39;extdata/gridAnnotation.raw&#39;,package=&quot;ABIgeneRMINC&quot;)
mask=allenVectorTOmincVector(read.raw.gene(labelfile,labels=TRUE)&gt;0)
interp.gene=interpolate.gene(genedata2.reflected,mask)

mincPlotSliceSeries(
  anatomy=mincArray(mincGetVolume(anatfile)),
  statistics=mincArray(interp.gene),
  symmetric=FALSE,
  col=colorRampPalette(c(&quot;darkgreen&quot;,&quot;yellowgreen&quot;))(255),
  legend=&quot;Bdnf Expression&quot;,low=2,high=6.5)</code></pre>
<p><img src="/blog/post/2018-02-23_gene-expression_files/figure-html/9-1.png" width="672" /></p>
<p>Even with interpolation, the expression map is not that good.</p>
</div>
<div id="expression-statistics" class="section level2">
<h2>Expression statistics</h2>
<p>Moving back to the coronal maps, let’s generate summary statistics for each structure in the ABI atlas.</p>
<pre class="r"><code>labels=read.raw.gene(labelfile,labels=TRUE)
labels.to.sum=sort(unique(labels))
labels.to.sum=labels.to.sum[labels.to.sum!=0]

udf=unionize(grid.data=genedata1,             #vector to unionize
           labels.to.sum=labels.to.sum,       #sum all labels
           labels.grid=labels                 #the vector of labels
           )
udf=udf[order(udf$mean,decreasing=TRUE),]
head(udf)</code></pre>
<pre><code>##     labels        sum     mean     stdev
## 167    287  19.641589 4.910397 12.018447
## 474    875  48.372759 4.397524  6.287998
## 261    483 123.968708 3.178685  3.827543
## 171    292  34.930620 3.175511  6.002760
## 162    279   6.248917 3.124459  3.977935
## 22      50  12.193722 3.048430  1.094984</code></pre>
<p>Now let us read a csv with structure names in it that correspond to the label number and add that as a column in our data frame.</p>
<pre class="r"><code>labeldefs=read.csv(&quot;/projects/egerek/matthijs/2015-07-Allen-Brain/Allen_Gene_Expression/labels/allen_gridlabels_structures.csv&quot;) #this can be downloaded from ABI
udf$structures=labeldefs[match(labeldefs$id,udf$labels),&#39;name&#39;]
udf = udf[,c(&#39;structures&#39;,&#39;labels&#39;,&#39;mean&#39;,&#39;sum&#39;,&#39;stdev&#39;)]
head(udf)</code></pre>
<pre><code>##                                                                    structures
## 167                                Main olfactory bulb, outer plexiform layer
## 474 Bed nuclei of the stria terminalis, anterior division, anterolateral area
## 261                                                   Visceral area, layer 6b
## 171                                                Uvula (IX), granular layer
## 162                       Retrosplenial area, lateral agranular part, layer 1
## 22        Bed nuclei of the stria terminalis, anterior division, oval nucleus
##     labels     mean        sum     stdev
## 167    287 4.910397  19.641589 12.018447
## 474    875 4.397524  48.372759  6.287998
## 261    483 3.178685 123.968708  3.827543
## 171    292 3.175511  34.930620  6.002760
## 162    279 3.124459   6.248917  3.977935
## 22      50 3.048430  12.193722  1.094984</code></pre>
<p>Voila, we can now tell which structures have high gene expression for the gene we are interested in.</p>
</div>
<div id="outro" class="section level2">
<h2>Outro</h2>
<p>I plan to do tutorials on more fancy gene expression analyses in the future, but this is the base from which future tutorials will be built. I hope this gets you started on using gene expression to explore neuroanatomical phenotypes and gives you an understanding of some of the caveats associated with spatial gene expression analysis.</p>
</div>
]]>
      </description>
    </item>
    
    <item>
      <title>Finding and playing with peaks in RMINC</title>
      <link>/blog/post/2018-02-08_peaks-intro/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/post/2018-02-08_peaks-intro/</guid>
      <description><![CDATA[
      <script src="/blog/rmarkdown-libs/htmlwidgets/htmlwidgets.js"></script>
<script src="/blog/rmarkdown-libs/jquery/jquery.min.js"></script>
<link href="/blog/rmarkdown-libs/datatables-css/datatables-crosstalk.css" rel="stylesheet" />
<script src="/blog/rmarkdown-libs/datatables-binding/datatables.js"></script>
<link href="/blog/rmarkdown-libs/dt-core/css/jquery.dataTables.min.css" rel="stylesheet" />
<link href="/blog/rmarkdown-libs/dt-core/css/jquery.dataTables.extra.css" rel="stylesheet" />
<script src="/blog/rmarkdown-libs/dt-core/js/jquery.dataTables.min.js"></script>
<link href="/blog/rmarkdown-libs/crosstalk/css/crosstalk.css" rel="stylesheet" />
<script src="/blog/rmarkdown-libs/crosstalk/js/crosstalk.min.js"></script>


<p>So, peaks. When producing a statistical map, it’s good to get a report of the peaks (i.e. most significant findings). RMINC has had this support for a while now, though it has remained somewhat hidden. Here’s a bit of an intro, then.</p>
<p>I will walk through the example we used from the Mouse Imaging Summer School in 2017, which is data from this paper:</p>
<p>de Guzman AE, Gazdzinski LM, Alsop RJ, Stewart JM, Jaffray DA, Wong CS, Nieman BJ. Treatment age, dose and sex determine neuroanatomical outcome in irradiated juvenile mice. Radiat Res. 2015 May;183(5):541–9.</p>
<p>To keep it simple, however, I’ll only look at sex differences in that dataset for now.</p>
<p>Let’s start - load the libraries and read in the csv file that describes the data.</p>
<pre class="r"><code>suppressMessages(library(RMINC))
gf &lt;- read.csv(&quot;/hpf/largeprojects/MICe/jason/MISS2017/intro-stats/fixed_datatable_IRdose.csv&quot;)</code></pre>
<p>And run a linear model relating the Jacobian determinants to sex and radiation dose. I’ll use the segmentations file as a mask; it’ll be needed later on anyway.</p>
<pre class="r"><code>labelFile &lt;- &quot;/hpf/largeprojects/MICe/jason/MISS2017/intro-stats/atlas-registration/pipeline-18-08-2017-at-07-08-48_processed/nlin-3/voted.mnc&quot;
vs &lt;- mincLm(Jacobfile_scaled0.2 ~ Sex + Dose, gf, mask = labelFile)</code></pre>
<pre><code>## Method: lm
## Number of volumes: 41
## Volume sizes: 152 320 225
## N: 41 P: 3
## In slice 
##  0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99  100  101  102  103  104  105  106  107  108  109  110  111  112  113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128  129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144  145  146  147  148  149  150  151 
## Done</code></pre>
<p>Some more data preparation: read in the background anatomy file …</p>
<pre class="r"><code>anatFile &lt;- &quot;/projects/moush/lbernas/Irradiation_behaviour_project/fixed_build_masked_23mar13_nlin/nlin-3.mnc&quot;
anatVol &lt;- mincArray(mincGetVolume(anatFile))</code></pre>
<p>… and show the results at a somewhat arbitrary threshold.</p>
<pre class="r"><code>mincPlotSliceSeries(anatVol, mincArray(vs, &quot;tvalue-SexM&quot;), anatLow=10, anatHigh=15, low=2, high=6, symmetric = T,
                    begin=50, end=-50)</code></pre>
<p><img src="/blog/post/2018-02-08_peaks-intro_files/figure-html/unnamed-chunk-4-1.png" width="672" /></p>
<p>At this point we’ve run a linear model and visually assessed the results. Now we can locate the peak findings, using the <code>mincFindPeaks</code> command.</p>
<pre class="r"><code>peaks &lt;- mincFindPeaks(vs, &quot;tvalue-SexM&quot;, minDistance = 1, threshold = 4)</code></pre>
<pre><code>## Writing column tvalue-SexM to file /tmp/Rtmpuzd1xE/file1b495f159c51.mnc 
## Range: 10.627142 -5.694668</code></pre>
<p><code>mincFindPeaks</code> uses the <code>find_peaks</code> command from the MINC toolkit under the hood. You pass in the output of one of the RMINC modelling commands (mincLm in this case, but can be anything), along with the column from that model you want to get peaks from. You can then set the minimum distance between peaks (in mm) - i.e. how far apart do two statistical peaks have to be to be included? - as well as the threshold to be considered a peak. Optionally thresholds can be different for positive and negative peaks; as always, see <code>?mincFindPeaks</code> for more detail.</p>
<p>This is what we have at this point:</p>
<pre class="r"><code>peaks</code></pre>
<div id="htmlwidget-1" style="width:100%;height:auto;" class="datatables html-widget"></div>
<script type="application/json" data-for="htmlwidget-1">{"x":{"filter":"none","data":[["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37"],[75,154,104,124,94,176,158,102,74,131,122,67,78,105,107,51,110,60,138,85,148,38,56,104,120,143,29,107,30,168,159,32,122,70,89,175,107],[157,156,193,193,184,116,121,146,108,186,144,171,135,140,171,129,46,211,228,124,203,164,74,221,222,230,172,59,143,121,72,189,161,92,66,156,141],[50,52,56,52,75,83,83,105,96,75,108,41,52,67,107,62,45,114,136,63,132,58,60,80,125,105,96,116,65,47,91,76,131,61,34,127,46],[-2.126,2.298,-0.502,0.618,-1.062,3.53,2.522,-0.614,-2.182,1.01,0.506,-2.574,-1.958,-0.446,-0.334,-3.47,-0.165999999999999,-2.966,1.402,-1.566,1.962,-4.198,-3.19,-0.502,0.394,1.682,-4.702,-0.334,-4.646,3.082,2.578,-4.534,0.506,-2.406,-1.342,3.474,-0.334],[0.546000000000001,0.49,2.562,2.562,2.058,-1.75,-1.47,-0.0699999999999985,-2.198,2.17,-0.181999999999999,1.33,-0.685999999999999,-0.406,1.33,-1.022,-5.67,3.57,4.522,-1.302,3.122,0.938000000000001,-4.102,4.13,4.186,4.634,1.386,-4.942,-0.238,-1.47,-4.214,2.338,0.770000000000001,-3.094,-4.55,0.49,-0.35],[-1.456,-1.344,-1.12,-1.344,-0.056,0.392,0.392,1.624,1.12,-0.056,1.792,-1.96,-1.344,-0.504,1.736,-0.784,-1.736,2.128,3.36,-0.728,3.136,-1.008,-0.896,0.224,2.744,1.624,1.12,2.24,-0.616,-1.624,0.84,0,3.08,-0.84,-2.352,2.856,-1.68],[10.63,9.435,8.88,7.064,5.521,5.373,5.37,5.357,5.318,5.234,5.203,4.965,4.357,4.324,4.205,4.152,4.039,-5.695,-4.836,-4.832,-4.791,-4.711,-4.632,-4.612,-4.507,-4.506,-4.504,-4.439,-4.392,-4.345,-4.278,-4.209,-4.162,-4.142,-4.088,-4.054,-4.011]],"container":"<table class=\"display\">\n  <thead>\n    <tr>\n      <th> <\/th>\n      <th>d1<\/th>\n      <th>d2<\/th>\n      <th>d3<\/th>\n      <th>x<\/th>\n      <th>y<\/th>\n      <th>z<\/th>\n      <th>value<\/th>\n    <\/tr>\n  <\/thead>\n<\/table>","options":{"pageLength":5,"columnDefs":[{"className":"dt-right","targets":[1,2,3,4,5,6,7]},{"orderable":false,"targets":0}],"order":[],"autoWidth":false,"orderClasses":false,"lengthMenu":[5,10,25,50,100]}},"evals":[],"jsHooks":[]}</script>
<p>There are 7 columns; the first three give the coordinates in voxel space, the next three the coordinates in world space, and then the peak value itself. There’s a further helpful command that labels the peaks with the atlas location within which the peak is located:</p>
<pre class="r"><code>defsFile &lt;- &quot;/hpf/largeprojects/MICe/tools/atlases/Dorr_2008_Steadman_2013_Ullmann_2013_Richards_2011_Qiu_2016_Egan_2015_40micron/mappings/DSURQE_40micron_R_mapping.csv&quot;
peaks &lt;- mincLabelPeaks(peaks, labelFile, defsFile)</code></pre>
<pre><code>## Warning in peaks$label[i] &lt;- mdefs$Structure[mdefs$value == peaks
## $label[i]]: number of items to replace is not a multiple of replacement
## length

## Warning in peaks$label[i] &lt;- mdefs$Structure[mdefs$value == peaks
## $label[i]]: number of items to replace is not a multiple of replacement
## length

## Warning in peaks$label[i] &lt;- mdefs$Structure[mdefs$value == peaks
## $label[i]]: number of items to replace is not a multiple of replacement
## length

## Warning in peaks$label[i] &lt;- mdefs$Structure[mdefs$value == peaks
## $label[i]]: number of items to replace is not a multiple of replacement
## length

## Warning in peaks$label[i] &lt;- mdefs$Structure[mdefs$value == peaks
## $label[i]]: number of items to replace is not a multiple of replacement
## length</code></pre>
<p>This adds an extra column containing the name of the label for each peak:</p>
<pre class="r"><code>peaks</code></pre>
<div id="htmlwidget-2" style="width:100%;height:auto;" class="datatables html-widget"></div>
<script type="application/json" data-for="htmlwidget-2">{"x":{"filter":"none","data":[["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37"],[75,154,104,124,94,176,158,102,74,131,122,67,78,105,107,51,110,60,138,85,148,38,56,104,120,143,29,107,30,168,159,32,122,70,89,175,107],[157,156,193,193,184,116,121,146,108,186,144,171,135,140,171,129,46,211,228,124,203,164,74,221,222,230,172,59,143,121,72,189,161,92,66,156,141],[50,52,56,52,75,83,83,105,96,75,108,41,52,67,107,62,45,114,136,63,132,58,60,80,125,105,96,116,65,47,91,76,131,61,34,127,46],[-2.126,2.298,-0.502,0.618,-1.062,3.53,2.522,-0.614,-2.182,1.01,0.506,-2.574,-1.958,-0.446,-0.334,-3.47,-0.165999999999999,-2.966,1.402,-1.566,1.962,-4.198,-3.19,-0.502,0.394,1.682,-4.702,-0.334,-4.646,3.082,2.578,-4.534,0.506,-2.406,-1.342,3.474,-0.334],[0.546000000000001,0.49,2.562,2.562,2.058,-1.75,-1.47,-0.0699999999999985,-2.198,2.17,-0.181999999999999,1.33,-0.685999999999999,-0.406,1.33,-1.022,-5.67,3.57,4.522,-1.302,3.122,0.938000000000001,-4.102,4.13,4.186,4.634,1.386,-4.942,-0.238,-1.47,-4.214,2.338,0.770000000000001,-3.094,-4.55,0.49,-0.35],[-1.456,-1.344,-1.12,-1.344,-0.056,0.392,0.392,1.624,1.12,-0.056,1.792,-1.96,-1.344,-0.504,1.736,-0.784,-1.736,2.128,3.36,-0.728,3.136,-1.008,-0.896,0.224,2.744,1.624,1.12,2.24,-0.616,-1.624,0.84,0,3.08,-0.84,-2.352,2.856,-1.68],[10.63,9.435,8.88,7.064,5.521,5.373,5.37,5.357,5.318,5.234,5.203,4.965,4.357,4.324,4.205,4.152,4.039,-5.695,-4.836,-4.832,-4.791,-4.711,-4.632,-4.612,-4.507,-4.506,-4.504,-4.439,-4.392,-4.345,-4.278,-4.209,-4.162,-4.142,-4.088,-4.054,-4.011],["left Medial amygdala","right Medial amygdala","left hypothalamus","right hypothalamus","left bed nucleus of stria terminalis","right subiculum","right MoDG","left LMol","left pre-para subiculum","right bed nucleus of stria terminalis","right CA1Rad","left amygdala","left CA3Py Inner","left fasciculus retroflexus","left CA30r","left CA1Py"," medulla","left Primary somatosensory cortex","right Frontal association cortex"," midbrain","right Primary motor cortex","left Piriform cortex","left paramedian lobule (lobule 7)","left Dorsal tenia tecta","right Cingulate cortex: area 32","right Lateral orbital cortex","left Secondary somatosensory cortex"," lobule 6: declive","left Dorsolateral entorhinal cortex","right Caudomedial entorhinal cortex","right crus 1: ansiform lobule (lobule 6)","left Insular region: not subdivided","right Cingulate cortex: area 24b'"," medulla"," medulla","right Primary somatosensory cortex: barrel field","left mammillary bodies"]],"container":"<table class=\"display\">\n  <thead>\n    <tr>\n      <th> <\/th>\n      <th>d1<\/th>\n      <th>d2<\/th>\n      <th>d3<\/th>\n      <th>x<\/th>\n      <th>y<\/th>\n      <th>z<\/th>\n      <th>value<\/th>\n      <th>label<\/th>\n    <\/tr>\n  <\/thead>\n<\/table>","options":{"pageLength":5,"columnDefs":[{"className":"dt-right","targets":[1,2,3,4,5,6,7]},{"orderable":false,"targets":0}],"order":[],"autoWidth":false,"orderClasses":false,"lengthMenu":[5,10,25,50,100]}},"evals":[],"jsHooks":[]}</script>
<p>At this point you have all the info about the most significant peaks in the dataset. There is one additional useful command, a shortcut to plot each peak. Plotting the two most positive and the two most negative peaks, for example:</p>
<pre class="r"><code>opar &lt;- par(mfrow=c(2,2), mar=c(0,0,0,0))
nP &lt;- nrow(peaks)
for (i in c(1:2, nP:(nP-1))) {
  mincPlotPeak(peaks[i,], anatVol, mincArray(vs, &quot;tvalue-SexM&quot;), anatLow=10, anatHigh=15, low=2, high=6, symmetric=T)
}</code></pre>
<p><img src="/blog/post/2018-02-08_peaks-intro_files/figure-html/unnamed-chunk-11-1.png" width="672" /></p>
<pre class="r"><code>par(opar)</code></pre>
<p>There is an additional argument to <code>mincPlotPeak</code> - a function to create a plot of the peak. This is illustrated below:</p>
<pre class="r"><code># load ggplot2 for plotting
library(ggplot2)
# the plotting function; needs to take a single argument, the peak
p &lt;- function(peak) {
  # read in the data for that particular peak
  gf$voxel &lt;- mincGetWorldVoxel(gf$Jacobfile_scaled0.2, peak[&quot;x&quot;], peak[&quot;y&quot;], peak[&quot;z&quot;])
  # and create a box-plot; also read in info from the peak for a meaningful title
  ggplot(gf) + aes(x=Sex, y=exp(voxel)) + geom_boxplot() + 
    ggtitle(paste(&quot;Peak:&quot;, peak[&quot;label&quot;]), subtitle = paste(&quot;T statistic:&quot;, peak[&quot;value&quot;]))
}
# and plot the peak with its plot
mincPlotPeak(peaks[1,], anatVol, mincArray(vs, &quot;tvalue-SexM&quot;), anatLow=10, anatHigh=15, low=2, high=6, 
             symmetric=T, plotFunction = p)</code></pre>
<pre><code>## Don&#39;t know how to automatically pick scale for object of type mincVoxel/vector. Defaulting to continuous.</code></pre>
<p><img src="/blog/post/2018-02-08_peaks-intro_files/figure-html/unnamed-chunk-12-1.png" width="672" /></p>
<p>And that’s it. A quick survey for how to extract peaks, view them in a table, and create figures of the most significant findings.</p>
]]>
      </description>
    </item>
    
  </channel>
</rss>
